class Solution {
public:


    int possible(vector<int>& bloomDay, int m, int k , int mid){

        int count=0;
        int totalFlowers = 0;

        for(int i=0;i<bloomDay.size();i++){

            if(bloomDay[i] <= mid){
                count++;
            }else{
                totalFlowers += (count/k);
                count=0;
            }
        }
        totalFlowers += (count/k);
        return totalFlowers;
    }

    int minDays(vector<int>& bloomDay, int m, int k) {


        /// edge case //
        long long  flowers = (long long)m*k;
        if(flowers > bloomDay.size()) return -1;


        // finding min and max //
        int mini = INT_MAX;                   
        int maxi = INT_MIN;
                                        
        for(int i=0;i<bloomDay.size();i++){
            maxi = max(maxi , bloomDay[i]);
            mini = min(mini , bloomDay[i]);
        }

       /// binary serach /// 
        int left=mini; int right = maxi;

        while(left <= right){
            int mid = left + (right-left)/2;

            if(possible(bloomDay , m , k, mid) >= m){
                 right=mid-1;
            }else{
                 left = mid+1;
            }
        }

        return left;
        
    }
};




;
