class Solution {
public:

    int countPartitions(vector<int>& nums, int mid){

        int partition=1;
        long long subarraysum = 0;
        for(int i=0;i<nums.size() ; i++)
        {
            if(subarraysum + nums[i] <= mid){
                subarraysum+=nums[i];
            }else{
                partition++;
                subarraysum = nums[i];
            }
        }

        return partition;
    }
    int splitArray(vector<int>& nums, int k) {

        int left = *max_element(nums.begin() , nums.end());
        int right = accumulate(nums.begin() , nums.end() , 0);

        while(left <= right)
        {
            int mid = left + (right-left)/2;

            if(countPartitions(nums , mid) > k ){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }

        return left;
        
    }
};
