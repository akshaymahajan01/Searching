class Solution {
public:

    int possible(vector<int>& nums, int mid){

         int total = 0;
         
         for(int i=0;i<nums.size();i++)
         {
            total += ceil((double)(nums[i]) / (double)(mid));
         }


         return total;

    }


    int smallestDivisor(vector<int>& nums, int threshold) {

         // edage case //
         if(nums.size() > threshold) return -1;

       

         int left = 1;  int right = *max_element(nums.begin() , nums.end());

         while(left <= right){

            int mid = left + (right - left)/2;

            if(possible(nums , mid) <= threshold){
                 right = mid-1;
            }else{
                 left = mid+1;
            }
         }    

          return left;
    }
};
