class Solution {
public:

    int maxelement(vector<int>& piles){
        int ans = INT_MIN;                             /// finding the max ///

        for(int i=0;i<piles.size();i++){
            ans = max(ans , piles[i]);
        }

        return ans;
    }

    long long  possible(vector<int>& piles , int mid){

        long long  totalhours=0;

        for(int i=0;i<piles.size();i++)                              /// fiding the time taken for each mid that is comming form binary search ////
        {
            totalhours  +=  ceil((double)(piles[i]) /(double)(mid));
        }

        return totalhours;
    }


    int minEatingSpeed(vector<int>& piles, int h) {

        int left=1; int right = maxelement(piles);
                                                                    ///  binary search ///
        while(left<=right){
            int mid = left + (right-left)/2;

            if(possible(piles,mid) <= h){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }

        return left;
        
    }
};
